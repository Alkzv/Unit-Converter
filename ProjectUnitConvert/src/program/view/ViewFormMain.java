/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program.view;

import java.util.List;
import program.VisualizeConvertersFiles;
import converters.ClassInterface.AbstractConverter;
import java.awt.event.ItemEvent;
import converters.Enum.MeasureType;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ViewFormMain extends javax.swing.JFrame {

    private boolean changedOptionJComboBox01 = false;
    private String typeDescriptionOfTheClass;
    private String basicUnitDescriptionOfTheClass;

    /**
     * Creates new form Iniciar
     */
    public ViewFormMain() {

        initComponents();
        this.FillComboBox(true, "","");
        jComboBox01ConvertFrom.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTextConvertFrom = new javax.swing.JLabel();
        jTextInsert = new javax.swing.JTextField();
        jLabelTextTo = new javax.swing.JLabel();
        jTextConverted = new javax.swing.JTextField();
        jComboBox01ConvertFrom = new javax.swing.JComboBox<>();
        jComboBox02ConvertTo = new javax.swing.JComboBox<>();
        jLabelBackground = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelTextConvertFrom.setBackground(new java.awt.Color(255, 255, 255));
        jLabelTextConvertFrom.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        jLabelTextConvertFrom.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTextConvertFrom.setText("Convert from");
        getContentPane().add(jLabelTextConvertFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 140, 100));

        jTextInsert.setDoubleBuffered(true);
        getContentPane().add(jTextInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, 150, 70));

        jLabelTextTo.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        jLabelTextTo.setForeground(new java.awt.Color(255, 255, 255));
        jLabelTextTo.setText("To");
        getContentPane().add(jLabelTextTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, -1, -1));

        jTextConverted.setEditable(false);
        jTextConverted.setBackground(new java.awt.Color(204, 204, 204));
        getContentPane().add(jTextConverted, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 190, 150, 70));

        jComboBox01ConvertFrom.setMaximumRowCount(200);
        jComboBox01ConvertFrom.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBox01ConvertFrom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ConvertersIClasstemStateChanged(evt);
            }
        });
        getContentPane().add(jComboBox01ConvertFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, 530, 70));

        jComboBox02ConvertTo.setMaximumRowCount(200);
        jComboBox02ConvertTo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jComboBox02ConvertTo.setEnabled(false);
        jComboBox02ConvertTo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox02ConvertToItemStateChanged(evt);
            }
        });
        getContentPane().add(jComboBox02ConvertTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 190, 530, 70));

        jLabelBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/FundoView1.png"))); // NOI18N
        getContentPane().add(jLabelBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(-16, 0, 1380, 390));

        jMenu1.setText("File");
        jMenuBar2.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        setSize(new java.awt.Dimension(1061, 402));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FillComboBox(boolean isFirstComboBox, String selectedItemType, String selectedItem) {
        try {
            VisualizeConvertersFiles visualizeArchivesConverters = new VisualizeConvertersFiles();
            List<String> listWithNamesArchivesInDirectoryConverters = visualizeArchivesConverters.VisualizeConvertersFiles();

            for (String listNameArchive : listWithNamesArchivesInDirectoryConverters) {

                AbstractConverter newInstance = (AbstractConverter) Class.forName(listNameArchive).getConstructor().newInstance();
                List<MeasureType> list = newInstance.getDescriptionClassConverter();
                
                for (MeasureType descriptionOfTheClass : list) {

                    typeDescriptionOfTheClass = descriptionOfTheClass.getTypeString();
                    basicUnitDescriptionOfTheClass = descriptionOfTheClass.getBasicUnit();
                }   

                String itemJComboBox = basicUnitDescriptionOfTheClass + " [" + typeDescriptionOfTheClass + "]: " + listNameArchive;
                
                if (isFirstComboBox) {
                    jComboBox01ConvertFrom.addItem(basicUnitDescriptionOfTheClass + " [" + typeDescriptionOfTheClass + "]: " + listNameArchive);
                } else {
                    
                    if (selectedItemType.equals(typeDescriptionOfTheClass) && !itemJComboBox.equals(selectedItem)) {
                        jComboBox02ConvertTo.addItem(basicUnitDescriptionOfTheClass + " [" + typeDescriptionOfTheClass + "]: " + listNameArchive);
                    }
                }
            }

            changedOptionJComboBox01 = true;

        } catch (Exception e) {
            // TODO Auto-generated catch block
            System.out.println(e);
            
        }
    }
    private void ConvertersIClasstemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ConvertersIClasstemStateChanged

        if (evt.getStateChange() == ItemEvent.SELECTED && changedOptionJComboBox01) {

            try {

                jComboBox02ConvertTo.setEnabled(true);
                jComboBox02ConvertTo.removeAllItems();
                String selectedItemType = jComboBox01ConvertFrom.getSelectedItem().toString().trim();
                String selectedItem = jComboBox01ConvertFrom.getSelectedItem().toString().trim();

                String regex = "\\[(.*?)\\]";
                Pattern p = Pattern.compile(regex);
                Matcher m = p.matcher(selectedItemType);

                while (m.find()) {

                    selectedItemType = m.group(1);

                }
                this.FillComboBox(false, selectedItemType, selectedItem);

            } catch (Exception e) {
                // TODO Auto-generated catch block
                System.out.println(e);

            }
        }
    }//GEN-LAST:event_ConvertersIClasstemStateChanged

    private void jComboBox02ConvertToItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox02ConvertToItemStateChanged
        try {
            String selectedItem = jComboBox02ConvertTo.getSelectedItem().toString().trim();
            String[] selectedConvertionType = selectedItem.split(": ", 2);
            System.out.println(selectedConvertionType[1]);

            AbstractConverter newInstance = (AbstractConverter) Class.forName(selectedConvertionType[1]).getConstructor().newInstance();
            List<MeasureType> list = newInstance.getDescriptionClassConverter();

            for (MeasureType descriptionOfTheClass : list) {
         
                typeDescriptionOfTheClass = descriptionOfTheClass.getTypeString();
                basicUnitDescriptionOfTheClass = descriptionOfTheClass.getBasicUnit();
            }   
            
            Class myClass = Class.forName("MyClass");

            Class[] types = {Double.TYPE, this.getClass()};
            Constructor constructor = myClass.getConstructor(types);
            constructor.newInstance(new Double(0), this);

            Object[] parameters = {new Double(0), this};
            Object instanceOfMyClass = constructor.newInstance(parameters);
            
            Object o = Class.forName(selectedConvertionType[1]).newInstance(); 
            
            o.convert();
            
            System.out.println(o);
            
            System.out.println(typeDescriptionOfTheClass);
            System.out.println(basicUnitDescriptionOfTheClass);
            
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            System.out.println(e);
        }
    }//GEN-LAST:event_jComboBox02ConvertToItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox01ConvertFrom;
    private javax.swing.JComboBox<String> jComboBox02ConvertTo;
    private javax.swing.JLabel jLabelBackground;
    private javax.swing.JLabel jLabelTextConvertFrom;
    private javax.swing.JLabel jLabelTextTo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JTextField jTextConverted;
    private javax.swing.JTextField jTextInsert;
    // End of variables declaration//GEN-END:variables
}
